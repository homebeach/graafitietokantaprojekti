Hei! Tässä tulee vähän tilannepäivitystä tähän mennessä tehdystä työstä.

Ajoin ensinnäkin testit vielä toiseen kertaan. Eli nyt on kaksi tiedostoa, jossa tuloksia viimeisimmillä versioilla:


Results_for_100000rows_MariaDB_10.5.6_Neo4J_4.1.3_15.10.2020.xlsx
Results_for_100000rows_MariaDB_10.5.6_Neo4J_4.1.3_18.10.2020.xlsx


Vuoden alussa tehdyt ajot vanhemmilla tietokantaversioilla löytyvät tulokset löytyvät tiedostosta:

Results_for_100000rows_MariaDB_ 10.4.11_Neo4J_3.5.14.xlsx


Kummassakin uusilla verolla tehdyllä ajolla tietokantojen järjestys nopeimmasta hitaampaan on seuraava:

Short query

1. Neo4J, 2. MariaDB, 3. MySQL

Long query

1. MariaDB, 2. MySQL, 3. Neo4J

Query with defined key

MariaDB/MySQL varsin tasoissa, Neo4J kumpaakin hitaampi
Sekä MariaDB, että MySQL tulos on tässä lähes 0 ms.

Aggregate query

1. MariaDB, 2. Neo4J, 3. MySQL

Recursive query

15.10.2020 ajossa oli 100 laskua ja 18.10.2020 ajossa 1000 laskua. Kokeilin myös 10000 laskua, mutta Neo4J:n testissä meni aivan liian kauan.

100 laskulla:

1. MariaDB, 2. MySQL, 3. Neo4J

1000 laskulla:

1. MySQL, 2. MariaDB, 3. Neo4J


Tietokantojen päivityksen myötä tulokset ovat oikeastaan entistäkin mielenkiintoisempia. Short query vs long query ero jäi mietityttämään. Muissa kyselyissä MariaDB tarjoaa parhaan suorituskyvyn paitsi, kun laskujen määrää lisätään, MySQL on nopeampi. Myös 10000 laskulla, josta minulla on vain MariaDB ja MySQL tulokset, MySQL on nopeampi. Ehkä tämä johtuu siitä, että MariaDB:ssä tuota perinteistä rekursiivista kyselyä ei ole enää optimoitu niin hyvin, koska MariaDB:ssä olisi varmaankin suositeltavaa käyttää Common Table Expressionsia.


Parantelin artikkeliluonnosta keskustelussa tekemieni muistiinpanojen pohjalta.


-Parantelin introa

-Tietokanta on nyt nimeltään "invoicing database" warehousen sijasta.


Related studyssä on nyt avattu aikaisempien tutkimusten testejä paremmin.

Aikaisemmista tutkimuksista lyhyesti:


[graph1]

-tässä vertaillaan 12 tietokantaa, joilla voidaan käsitellä graafidataa. Kantoja tutkitaan Single Source Shortest Path, connected components, Pagerank ja graafin päivitys.

-parhaat tulokset viisikolla STINGER, MTGL, Boost, Graph and NetworkX

-Neo4J mukana, mutta ei kuulu kärkikastiin

-viite tutkimukseen [graph5] 

[graph2] 

-Neo4J 1.9.1 testataan kahdella datasetillä ja kahdella kyselyllä. 

-kyselyt: “find coAuthor of a paper written by an author”, “find a paper written by an author”

-Kyselyt tehdään Java API:lla, TraverseFrameworkilla ja Cypherillä. Kaksi edellistä ovat nopeampia Cypheriin nähden.

-viite tutkimukseen [graph6]

[graph3]

-vertaillaan Oracle 11g:tä ja Neo4J 3.03 lääketieteellisellä datasetillä. Testissä suorituskyvyltä optimoitu ja optimoimaton Oracle. Samoilla tutkijoilla on aiempi tutkimus, jossa käsitellään optimoimatonta Oraclea. Laitoin siihen viitteen [graph7].
-Neo4J on nopeampi testeissä, kuin optimaton ja optimoitu Oracle.

-viite tutkimukseen [graph5]

[graph4]

-Tässä testataan Neo4J:tä erilaisilla kyslytavoilla: Cypher REST, Gremlin REST, natiivi Cypher ja vertaillaan Java Persistence Apin kanssa käytettyyn MySQL:ään.
-Neo4J on nopeampi kuin MySQL JPA.
-Natiivit kyselyt nopeampia kuin Cypher REST API ja Gremlin REST.
-Gremlinillä joitakin nopeusetuja Cypheriin nähden.

-viitteet [graph5] ja [graph6]


Sekä [graph5] ja [graph6] olivat tutkimuksia, joissa vertailtiin MySQL 5.1.42 ja Neo4J:tä. Nöissä tulokset pääsääntöisesti Neo4J eduksi.


Eli nyt on tosiaan related study ja tulokset paremmassa kunnossa. Voisin tässä nyt vielä etsiä, josko tässä olisi tullut uusia tutkimuksia, jotka olisivat relevantteja meidän tutkimuksen kannalta. MariaDB:hen liittyen löysin äkkiseltään tällaisen: https://ieeexplore.ieee.org/document/7881999.



